{"version":3,"sources":["components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","index.js","components/TodoItem.module.css"],"names":["TodoItem","state","editing","title","props","todo","onChange","e","setState","target","value","handleEditing","handleUpdate","newTitle","id","key","setUpdateProps","onClick","deleteTodoProps","viewMode","editMode","completed","this","styles","todoInput","editInput","className","item","onDoubleClick","checkbox","type","checked","handleChangeProps","delete","style","fontStyle","color","opacity","textDecoration","onKeyDown","React","Component","TodosList","todos","map","Header","InputTodo","handleSubmit","preventDefault","trim","addTodoProps","alert","onSubmit","placeholder","TodoContainer","addTodoItem","newTodo","uuidv4","deleteTodoItem","filteredTodos","filter","handleChange","prevState","setUpdate","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f120363a.chunk.js","sourcesContent":["import React from \"react\"\nimport styles from \"./TodoItem.module.css\"\nimport { AiFillDelete } from \"react-icons/ai\"\n\n\n\nclass TodoItem extends React.Component {\n    state = {\n        editing: false,\n        title: this.props.todo.title\n    }\n\n    onChange = (e) => {\n        this.setState({\n            title: e.target.value\n        })\n    }\n\n    handleEditing = () => {\n        this.setState({\n            editing: true\n        })\n    }\n\n    handleUpdate = (e,newTitle, id) => {\n        if (e.key===\"Enter\"){\n            this.props.setUpdateProps(newTitle, id)\n            this.setState({\n                editing:false\n            })\n        }\n\n    }\n\n    render() {\n\n\n        const completed = this.props.todo.completed\n        const id = this.props.todo.id\n\n        //Adding an inline style here to practice another way of adding styles\n        const completedStyle = {\n            fontStyle: \"italic\",\n            color: \"#595959\",\n            opacity: 0.4,\n            textDecoration: \"line-through\",\n          }\n    \n\n        let viewMode;\n        let editMode;\n\n        if (this.state.editing) {\n            viewMode = styles.todoInput\n        } else {\n            editMode = styles.editInput\n        }\n\n        return (\n            <li className={styles.item}>\n                <div onDoubleClick={this.handleEditing} className={viewMode}>\n                    <input\n                        className= {styles.checkbox}\n                        type=\"checkbox\"\n                        checked={completed}\n                        onChange={() => this.props.handleChangeProps(id)}\n                    />\n                    <button className={styles.delete} onClick={()=>this.props.deleteTodoProps(id)}><AiFillDelete/></button>\n                    <span style = {completed?completedStyle:null}>{this.props.todo.title}</span>\n                </div>\n                <input \n                    type=\"text\"\n                    onKeyDown = {(e) => this.handleUpdate(e,this.state.title, this.id)}\n                    className={editMode}\n                    value={this.state.title}\n                    onChange={this.onChange}>\n                </input>\n            </li>\n        )\n    }\n\n\n\n\n    onClick = e => {\n        this.props.deleteTodoProps(this.id)\n    }\n}\n\n\nexport default TodoItem","import React from \"react\"\nimport TodoItem from \"./TodoItem\"\nclass TodosList extends React.Component {\n\n    render() {\n        return (\n            <ul>\n                {this.props.todos.map(todo => (\n                    <TodoItem \n                    key={todo.id} todo={todo} \n                    deleteTodoProps = {this.props.deleteTodoProps}\n                    handleChangeProps = {this.props.handleChangeProps}\n                    setUpdateProps = {this.props.setUpdateProps}\n                    />\n                ))}\n            </ul>\n        );\n    }\n}\n\nexport default TodosList\n","import React from \"react\"\n\nconst Header = () => {\n    return (\n        <header>\n            <h1>Todos</h1>\n        </header>\n    )\n}\n\n\nexport default Header","import React from \"react\"\nimport { CgAddR } from \"react-icons/cg\"\n\n\nclass InputTodo extends React.Component {\n    state = {\n        title: \"\"\n    }\n\n    onChange = e => {\n        // this.setState({\n        //     [e.target.name]:e.target.value,\n        // })\n\n        this.setState({ title: e.target.value });\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        if (this.state.title.trim()) {\n            this.props.addTodoProps(this.state.title)\n            this.setState({\n                title: \"\"\n            })\n        } else {\n            alert(\"Please enter something\")\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"form-container\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Add todo...\"\n                    value={this.state.title}\n                    onChange={this.onChange} \n                    className=\"input-text\"/>\n                <button className=\"input-submit\"><CgAddR /></button>\n            </form>\n        )\n    }\n}\n\nexport default InputTodo","import React from \"react\"\nimport TodosList from \"./TodosList\"\nimport Header from \"./Header\"\nimport InputTodo from \"./InputTodo\"\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass TodoContainer extends React.Component {\n    state = {\n        // todos: [\n        //     {\n        //         id: 1,\n        //         title: \"Setup development environment\",\n        //         completed: true\n        //     },\n        //     {\n        //         id: 2,\n        //         title: \"Develop website and add content\",\n        //         completed: false\n        //     },\n        //     {\n        //         id: 3,\n        //         title: \"Deploy to live server\",\n        //         completed: false\n        //     }\n        // ]\n\n        todos:[]\n    };\n\n    addTodoItem = title => {\n        const newTodo = {\n            id: uuidv4(),\n            title: title,\n            completed: false\n        }\n        this.setState({\n            todos:[...this.state.todos, newTodo]\n        })\n    }\n\n\n    deleteTodoItem  = id => {\n\n        const filteredTodos = this.state.todos.filter(todo => {\n            return todo.id !== id\n        })\n\n        this.setState({\n            todos:filteredTodos\n        })\n\n\n        // this.setState({\n        //     todos:[...this.state.todos.filter(todo => {\n        //         return todo.id !== id\n        //     })]\n        // })\n \n    }\n\n    handleChange  = (id) => {\n        //this is not the neatest, but it works\n    //    const changedTodos = this.state.todos.map(todo => {\n    //        if (todo.id === id){\n    //            todo.completed = !todo.completed\n    //        }\n    //        return todo\n    //    })\n    //    this.setState({\n    //        todo: changedTodos\n    //    })\n\n       /*\n       //in one step\n       this.setState({\n           todos: this.state.todos.map(todo => {\n            if (todo.id === id){\n                todo.completed = !todo.completed\n            }\n            return todo\n           })\n       })\n*/\n    \n\n       //use prevState param - don't rely on this.state\n       //this does not work with strict mode\n    //    this.setState(prevState =>({\n    //     todos: prevState.todos.map(todo => {\n    //      if (todo.id === id){\n    //          todo.completed = !todo.completed\n    //      }\n    //      return todo\n    //     })\n    // }))\n\n    this.setState(prevState => ({\n        todos: prevState.todos.map(todo => {\n          if (todo.id === id) {\n              return {\n                  ...todo, completed: !todo.completed\n              }\n          }\n          return todo\n        })\n      }))\n\n    }\n\n    setUpdate = (newTitle, id) => {\n        this.setState(prevState =>{\n            return {\n                todos: prevState.todos.map(todo => {\n                    if (todo.id === id) {\n                        todo.title = newTitle\n                    }\n                    return todo\n                })\n            }})\n    }\n\n    render() {\n        return (\n         <div className=\"container\">\n            <div className=\"inner\">\n             <Header/>\n             <InputTodo addTodoProps = {this.addTodoItem}/>\n             <TodosList \n             todos = {this.state.todos}\n             deleteTodoProps = {this.deleteTodoItem}\n             handleChangeProps = {this.handleChange} \n             setUpdateProps = {this.setUpdate}          \n             />\n             </div>\n         </div>\n        );\n    }\n}\nexport default TodoContainer\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./App.css\"\n\n//component file\nimport TodoContainer from \"./components/TodoContainer\"\nReactDOM.render(\n    <React.StrictMode>\n        <TodoContainer />\n    </React.StrictMode>,\n    document.getElementById(\"root\"))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput\":\"TodoItem_todoInput__DNu7h\",\"editInput\":\"TodoItem_editInput__1mvq_\",\"item\":\"TodoItem_item__EiNWR\",\"checkbox\":\"TodoItem_checkbox__HTI3f\",\"delete\":\"TodoItem_delete__1qrvR\",\"textInput\":\"TodoItem_textInput__cdquX\"};"],"sourceRoot":""}